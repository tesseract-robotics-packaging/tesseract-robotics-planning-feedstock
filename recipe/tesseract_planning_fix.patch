diff --git a/tesseract_command_language/include/tesseract_command_language/core/instruction.h b/tesseract_command_language/include/tesseract_command_language/core/instruction.h
index d7d733d..613b704 100644
--- a/tesseract_command_language/include/tesseract_command_language/core/instruction.h
+++ b/tesseract_command_language/include/tesseract_command_language/core/instruction.h
@@ -41,6 +41,7 @@ TESSERACT_COMMON_IGNORE_WARNINGS_POP
 #include <tesseract_command_language/core/waypoint.h>
 #include <tesseract_command_language/core/serialization.h>
 #include <tesseract_common/sfinae_utils.h>
+#include <tesseract_command_language/utils/uncvref.h>
 
 #ifdef SWIG
 %ignore std::vector<tesseract_planning::Instruction>::vector(size_type);
@@ -228,18 +229,18 @@ namespace tesseract_planning
 {
 class Instruction
 {
-  template <typename T>
-  using uncvref_t = std::remove_cv_t<typename std::remove_reference<T>::type>;
+  // template <typename T>
+  // using uncvref_t = typename std::remove_cv<typename std::remove_reference<T>::type>::type;
 
   // Enable the generic ctor only if ``T`` is not a ForwardKinematics (after removing const/reference qualifiers)
   // If ``T`` is of type ForwardKinematics we disable so it will use the copy or move constructors of this class.
   template <typename T>
-  using generic_ctor_enabler = std::enable_if_t<!std::is_same<Instruction, uncvref_t<T>>::value, int>;
+  using generic_ctor_enabler = typename std::enable_if<!std::is_same<Instruction, typename uncvref<T>::type>::value, int>::type;
 
 public:
   template <typename T, generic_ctor_enabler<T> = 0>
   Instruction(T&& instruction)  // NOLINT
-    : instruction_(std::make_unique<detail_instruction::InstructionInner<uncvref_t<T>>>(instruction))
+    : instruction_(std::make_unique<detail_instruction::InstructionInner<typename uncvref<T>::type>>(instruction))
   {
   }
 
@@ -284,7 +285,7 @@ public:
       throw std::runtime_error("Instruction, tried to cast '" + std::string(getType().name()) + "' to '" +
                                std::string(typeid(T).name()) + "'!");
 
-    auto* p = static_cast<uncvref_t<T>*>(instruction_->recover());
+    auto* p = static_cast<typename uncvref<T>::type*>(instruction_->recover());
     return *p;
   }
 
@@ -295,7 +296,7 @@ public:
       throw std::runtime_error("Instruction, tried to cast '" + std::string(getType().name()) + "' to '" +
                                std::string(typeid(T).name()) + "'!");
 
-    const auto* p = static_cast<const uncvref_t<T>*>(instruction_->recover());
+    const auto* p = static_cast<const typename uncvref<T>::type*>(instruction_->recover());
     return *p;
   }
 
diff --git a/tesseract_command_language/include/tesseract_command_language/core/waypoint.h b/tesseract_command_language/include/tesseract_command_language/core/waypoint.h
index d49227f..8c6968b 100644
--- a/tesseract_command_language/include/tesseract_command_language/core/waypoint.h
+++ b/tesseract_command_language/include/tesseract_command_language/core/waypoint.h
@@ -40,6 +40,7 @@ TESSERACT_COMMON_IGNORE_WARNINGS_PUSH
 TESSERACT_COMMON_IGNORE_WARNINGS_POP
 
 #include <tesseract_command_language/core/serialization.h>
+#include <tesseract_command_language/utils/uncvref.h>
 #include <tesseract_common/sfinae_utils.h>
 
 #ifdef SWIG
@@ -194,18 +195,18 @@ namespace tesseract_planning
 {
 class Waypoint
 {
-  template <typename T>
-  using uncvref_t = std::remove_cv_t<typename std::remove_reference<T>::type>;
+  // template <typename T>
+  // using uncvref_t = typename std::remove_cv<typename std::remove_reference<T>::type>::type;
 
   // Enable the generic ctor only if ``T`` is not a ForwardKinematics (after removing const/reference qualifiers)
   // If ``T`` is of type ForwardKinematics we disable so it will use the copy or move constructors of this class.
   template <typename T>
-  using generic_ctor_enabler = std::enable_if_t<!std::is_same<Waypoint, uncvref_t<T>>::value, int>;
+  using generic_ctor_enabler = typename std::enable_if<!std::is_same<Waypoint, typename uncvref<T>::type>::value, int>::type;
 
 public:
   template <typename T, generic_ctor_enabler<T> = 0>
   Waypoint(T&& waypoint)  // NOLINT
-    : waypoint_(std::make_unique<detail_waypoint::WaypointInner<uncvref_t<T>>>(waypoint))
+    : waypoint_(std::make_unique<detail_waypoint::WaypointInner<typename uncvref<T>::type>>(waypoint))
   {
   }
 
@@ -246,7 +247,7 @@ public:
       throw std::runtime_error("Waypoint, tried to cast '" + std::string(getType().name()) + "' to '" +
                                std::string(typeid(T).name()) + "'!");
 
-    auto* p = static_cast<uncvref_t<T>*>(waypoint_->recover());
+    auto* p = static_cast<typename uncvref<T>::type*>(waypoint_->recover());
     return *p;
   }
 
@@ -257,7 +258,7 @@ public:
       throw std::runtime_error("Waypoint, tried to cast '" + std::string(getType().name()) + "' to '" +
                                std::string(typeid(T).name()) + "'!");
 
-    const auto* p = static_cast<const uncvref_t<T>*>(waypoint_->recover());
+    const auto* p = static_cast<const typename uncvref<T>::type*>(waypoint_->recover());
     return *p;
   }
 
diff --git a/tesseract_command_language/include/tesseract_command_language/utils/uncvref.h b/tesseract_command_language/include/tesseract_command_language/utils/uncvref.h
new file mode 100644
index 0000000..4084b6e
--- /dev/null
+++ b/tesseract_command_language/include/tesseract_command_language/utils/uncvref.h
@@ -0,0 +1,18 @@
+#ifndef TESSERACT_COMMAND_LANGUAGE_UNCVREF_H
+#define TESSERACT_COMMAND_LANGUAGE_UNCVREF_H
+
+#include <tesseract_common/macros.h>
+TESSERACT_COMMON_IGNORE_WARNINGS_PUSH
+#include <type_traits>
+TESSERACT_COMMON_IGNORE_WARNINGS_POP
+
+namespace tesseract_planning
+{
+    template <typename T>
+    struct uncvref
+    {
+        using type = typename std::remove_cv<typename std::remove_reference<T>::type>::type;
+    };
+}
+
+#endif
\ No newline at end of file
diff --git a/tesseract_motion_planners/CMakeLists.txt b/tesseract_motion_planners/CMakeLists.txt
index 14eb54a..e2d9a86 100644
--- a/tesseract_motion_planners/CMakeLists.txt
+++ b/tesseract_motion_planners/CMakeLists.txt
@@ -74,7 +74,7 @@ if(TESSERACT_BUILD_TRAJOPT_IFOPT)
 endif()
 
 # Examples
-add_subdirectory(examples)
+# add_subdirectory(examples)
 
 # Tests
 if(TESSERACT_ENABLE_TESTING)
diff --git a/tesseract_process_managers/CMakeLists.txt b/tesseract_process_managers/CMakeLists.txt
index 779066b..c438c27 100644
--- a/tesseract_process_managers/CMakeLists.txt
+++ b/tesseract_process_managers/CMakeLists.txt
@@ -10,6 +10,7 @@ if(WIN32)
 endif()
 
 # System dependencies are found with CMake's conventions
+find_package(jsoncpp REQUIRED)
 find_package(Eigen3 REQUIRED)
 find_package(Taskflow REQUIRED)
 find_package(console_bridge REQUIRED)
@@ -132,7 +133,7 @@ target_include_directories(${PROJECT_NAME}_utils PUBLIC "$<BUILD_INTERFACE:${CMA
                                                         "$<INSTALL_INTERFACE:include>")
 list(APPEND Targets ${PROJECT_NAME}_utils)
 
-add_subdirectory(examples)
+# add_subdirectory(examples)
 
 configure_package(NAMESPACE tesseract TARGETS ${Targets})
 
